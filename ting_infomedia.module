<?php

// load field hooks
module_load_include('inc', 'ting_infomedia', 'ting_infomedia.field');



/**
 * Implements hook_ting_client_webservice (@see ting_client.module)
 * this module does not implement its own request, but uses
 * ting-client/lib/request/TingClientInfomediaArticleRequest
 */
function ting_infomedia_ting_client_webservice() {
  $ret = array();
  $ret['infomediaArticle']['class'] = 'TingClientInfomediaArticleRequest';
  $ret['infomediaArticle']['url'] = 'ting_infomedia_url';
  $ret['infomediaArticle']['custom_parse'] = 'parse';

  return $ret;
}



/**
 * Implements hook_menu
 */
function ting_infomedia_menu() {
  $items['overlay/infomedia/%'] = array(
    'title' => 'Infomedia',
    'page callback' => 'ting_infomedia_view',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['overlay/infomedia/library_list'] = array(
    'title' => 'Infomedia library list',
    'page callback' => 'ting_infomedia_librarylist',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}



/** Implements hook_ting_openformat_actions
 * Add actions to work, subwork and manifestations
 * @param $type
 * @param $entity
 * @param $view_mode
 * @param $langcode
 * @return array
 */
function ting_infomedia_ting_openformat_actions($type, $entity, $view_mode, $langcode) {
  $element = array();
  if ($type == 'bibdkManifestation' && $url = $entity->getInfomediaLink()) {
    $link = _ting_infomedia_get_link($entity->id, $url);
    $element['infomedia']['#markup'] = theme('ting_infomedia_button', array('ting_infomedia_button' => $link));
  }
  return $element;
}



/**
 * Page callback function
 *
 * Return a render array
 */
function ting_infomedia_librarylist() {
  $ret = array();
  $list = bibdk_forsrights_get_library_list('infomedia');

  if ($list) {
    foreach ($list as $agencyId) {
      $agency = new TingAgency($agencyId);
      // only add agency if branch is not empty
      $branch = $agency->getBranch();
      if (!empty($branch)) {
        $ret[] = $agency;
      }
    }

    usort($ret, 'ting_infomedia_agency_cmp_by_name');

    global $user;
    if (!ding_user_is_provider_user($user)) {
      // user is not logged in; show a message
      $ret['#markup'] = '<h4>' . t('infomedia_login_required', array(), array('context' => 'ting_infomedia')) . '</h4>';
    }

    $ret['#markup'] .= '<h3 class="library-list-header">' . t('list_of_libraries_with_infomedia_acces', array(), array('context' => 'ting_infomedia')) . '</h2>';
    global $language;
    foreach ($ret as $key => $val) {
      if (is_object($val)) {
        $branch = $val->getBranch();
        if (isset($branch)) {
          $branchName = $branch->agencyName;
          if (isset($branchName)) {
            $moreinfo = theme('ting_agency_more_info', array('branch' => $branch,
              'openingHours' => theme('ting_agency_opening_hours', array('branch' => $branch)),
              'tools' => theme('ting_agency_tools', array('branch' => $branch)),
              'address' => theme('ting_agency_address', array('branch' => $branch)),
              'contact' => theme('ting_agency_contact', array('branch' => $branch)),
                )
            );
            $ret['#sortme'] = $branchName;
            $ret['#markup'] .=
                theme('ting_agency_library', array('branchName' => $branchName, 'moreinfo' => $moreinfo, 'add_classes' => array('ting-infomedia-agency-list')));
          }
        }
      }
    }
  }
  return $ret;
}



function ting_infomedia_agency_cmp_by_name($a, $b) {
  return strcmp($a->getBranch()->agencyName, $b->getBranch()->agencyName);
}



/**
 * Page callback function
 *
 * Return a render array
 */
function ting_infomedia_view($id) {
  drupal_add_js(drupal_get_path('module', 'ting_infomedia') . '/js/ting_infomedia.js');
  return array(
    '#theme' => 'ting_infomedia_articles',
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'ting_infomedia') . '/css/ting_infomedia_article_view.css'),
    ),
    'articles' => ting_infomedia_parse_articles($id),
    'print' => theme('image', array('path' => drupal_get_path('module', 'ting_infomedia') . '/img/ikon_printer.gif')) . "<span>" . t('print', array(), array('context' => 'ting_infomedia')) . "</span>",
  );
}



/**
 * Implements hook_theme
 * Set template for viewing ting_infomedia articles.
 * Set theme-function for displaying a link (field) to ting_infomedia
 *
 * @existing; array of existing themes
 * @type; which type is being process (module,base_theme_engine,theme_engine,base_theme,theme)
 * @theme; name of $type being processed
 * @path; directory path of theme or module
 *
 * return a render array
 */
function ting_infomedia_theme($existing, $type, $theme, $path) {
  return array(
    'ting_infomedia_button' => array(
      'variables' => array('ting_infomedia_button' => ''),
      'template' => 'theme/ting-infomedia-button',
    ),
    // page view definitions - view articles
    'ting_infomedia_articles' => array(
      'template' => 'theme/ting-infomedia-articles',
      'render element' => 'element',
    ),
    // page view definitions - view articles
    'ting_infomedia_article' => array(
      'template' => 'theme/ting-infomedia-article',
      'render element' => 'element',
    ),
  );
}



/**
 * Implements hook_form_FORM_ID_alter (ting_admin_ting_settings) (ie. Ding2)
 * Adding infomedia url form field to ting configuration form
 */
/*
  function ting_infomedia_form_ting_admin_ting_settings_alter(&$form, &$form_state, $form_id) {
  $form['infomedia'] = array(
  '#type' => 'fieldset',
  '#title' => t('Infomedia settings'),
  '#description' => t('Settings for bibdk Infomedia', array(), array('context' => 'ting_infomedia')),
  '#weight' => -3,
  );

  $form['infomedia']['ting_infomedia_url'] = array(
  '#type' => 'textfield',
  '#title' => t('Infomedia web service URL', array(), array('context' => 'ting_infomedia')),
  '#description' => t('URL to the infomedia webservice (access to infomedia article base) , e.g. http://useraccessinfomedia.addi.dk/1.2/'),
  '#required' => TRUE,
  '#default_value' => variable_get('ting_infomedia_url', ''),
  );
  }
 */



/**
 * Implements hook_form_FORM_ID_alter (ting_client_admin_webservices_settings) (ie. Bibliotek.dk)
 * Adding infomedia url form field to webservices configuration form
 */
function ting_infomedia_form_ting_client_admin_webservices_settings_alter(&$form, &$form_state, $form_id) {
  $form['infomedia'] = array(
    '#type' => 'fieldset',
    '#title' => t('Infomedia settings'),
    '#description' => t('Settings for bibdk Infomedia', array(), array('context' => 'ting_infomedia')),
    '#weight' => -3,
  );

  $form['infomedia']['ting_infomedia_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Infomedia web service URL', array(), array('context' => 'ting_infomedia')),
    '#description' => t('URL to the infomedia webservice (access to infomedia article base) , e.g. http://useraccessinfomedia.addi.dk/1.2/', array(), array('context' => 'ting_infomedia')),
    '#required' => TRUE,
    '#default_value' => variable_get('ting_infomedia_url', ''),
  );
}



/**
 * Implements hook_ting_openformat_getobject_params_alter. (@see ting_openformat.module)
 *
 * Add parameters to getObject request.
 */
function ting_infomedia_ting_openformat_getobject_params_alter(&$params) {
  $params['relationData'] = 'uri';
}



/**
 * retrive articles from infomedia. Parse for errors, clean html and add html for errorhandling if needed.
 * return render array
 */
function ting_infomedia_parse_articles($id) {

  $render = array(
    'article_tabs' => array(
      '#theme' => 'item_list',
      '#type' => 'ul',
      '#attributes' => array(
        'class' => array('article-tabs', 'clearfix'),
      ),
      '#items' => array(),
    ),
    'article_list' => array(
      '#theme' => 'item_list',
      '#type' => 'ul',
      '#attributes' => array(
        'class' => array('article-list'),
      ),
      '#items' => array(),
    ),
  );

  $obj = ting_infomedia_get_article($id);

  if ( !empty($obj->error) ) {
    $render['error'] = _ting_infomedia_parse_for_errors($obj->error);
  }
  else {
    foreach ( $obj->parts as $n => $val ) {
      if ( $error = _ting_infomedia_parse_for_article_error($val) ) {
        $render['error'] = _ting_infomedia_parse_for_errors($error);
      }
      else {
        $render['article_list']['#items'][] = drupal_render(ting_infomedia_parse_article($val['article'], $n));
        $render['article_tabs']['#items'][] = ting_infomedia_parse_article_tabs($val['article'], $n);
      }
    }
  }

  return $render;

}



/**
 * Parse Infomedia article
 * return render array
 */
function ting_infomedia_parse_article($article, $n) {

  $article = _ting_infomedia_clean_html($article);

  $render = array(
    '#theme'   => 'ting_infomedia_article',
    'article' => array(
      '#markup' => $article,
    ),
    'class' => ( !$n ) ? 'first active' : 'visuallyhidden',
    'id' => $n,
  );

  return $render;

}



/**
 * Parse Infomedia article
 * return render array
 */
function ting_infomedia_parse_article_tabs($article, $n) {

  $article = _ting_infomedia_clean_html($article);

  $exp = '/(<div class="infomedia_HeadLine">)(.+)(<\/div>)/';
  $match = preg_match($exp, $article, $regs);
  $headline = trim($regs[2]);

  $render = array(
    'data' => _shrink($headline),
    'data-article-id' => $n,
  );

  return $render;

}


/**
 * Truncate headline if nessecary, and add trailing dots
 * return string;
 */
function _shrink($cut) {
    $max=20;
    // check if headline contains ':'
    if ( $index=strpos($cut, ':') )
        $cut=substr($cut, $index+1, strlen($cut));

    if ( strlen($cut) > $max )
        $cut=substr($cut, 0, $max) . '...';

    return $cut;
}



/**
 * Parse for general (user and/or library) errors and take appropiate action if errors are found.
 * return string; if no errors an empty, if errors html-formatted with error string
 */
function _ting_infomedia_parse_for_errors($error = '') {
  if ( $error ) {
    $error = array(
      '#markup' => t($result->error, array(), array('context' => 'ting_infomedia.error')),
      '#prefix' => '<div class="infomedia_error">',
      '#suffix' => '</div>'
    );
  }
  return $error;
}



/**
 * Parse for error on article-level. Not verified, empty etc.
 * parameter $part - an array holding one article
 */
function _ting_infomedia_parse_for_article_error($part) {
  if (!$part['verified']) {
    return t('Article not verified', array(), array('context' => 'ting_infomedia'));
  }
  if (empty($part['article'])) {
    return t('Article not found on infomedia', array(), array('context' => 'ting_infomedia'));
  }
  return FALSE;
}



/**
 * Search/replace patterns
 * @html; Infomedia article html text
 *
 * return html
 */
function _ting_infomedia_clean_html($html) {

  $patterns = array();
  $patterns[0] = '/<p id="(.+)">/';
  $patterns[1] = '/<hl2>/';
  $patterns[2] = '/<\/hl2>/';

  $replacements = array();
  $replacements[0] = '<p>';
  $replacements[1] = '<h4>';
  $replacements[2] = '</h4>';

  $html = preg_replace($patterns, $replacements, $html);

  return $html;
}



function ting_infomedia_get_article($id) {

  // if we get this far we can assume that favourites are set in session
  $favourites = _ting_infomedia_get_favourites();
  $agencyMainId = NULL;
  $library_code = NULL;
  $user_id = NULL;
  $user_pincode = NULL;

  foreach ($favourites as $fav) {
    $favourite = unserialize($fav);
    if ($favourite->getOrderAgency()) {
      $agencyMainId = $favourite->getAgencyMainId();
      $library_code = $favourite->getAgencyId();
      $user_id = $favourite->getUserId();
      $user_pincode = $favourite->getPinCode();
      break;
    }
  }

  $library_list = bibdk_forsrights_get_library_list('infomedia');

  if (!in_array($library_code, $library_list)) {
    if (!in_array($agencyMainId, $library_list)) {
      $err = new TingClientInfomediaResult();
      $err->error = 'not_infomedia_library';
      return $err;
    }
    $library_code = $agencyMainId;
  }

  if ($library_code && $user_id && $user_pincode) {
    $params = array(
      'libraryCode' => $library_code,
      'userId' => $user_id,
      'userPinCode' => $user_pincode,
      'articleIdentifier' => array('faust' => $id),
      'outputType' => 'xml',
    );
  }
  else {
    $err = new TingClientInfomediaResult();
    $err->error = 'user_incomplete_userdata';
    return $err;
  }

  $client = new ting_client_class();
  $ret = $client->do_request('infomediaArticle', $params);

  return $ret;
}

t('user_incomplete_userdata', array(), array('context' => 'ting_infomedia.error'));
t('not_infomedia_library', array(), array('context' => 'ting_infomedia.error'));
t('service_unavailable', array(), array('context' => 'ting_infomedia.error'));
t('service_not_licensed', array(), array('context' => 'ting_infomedia.error'));
t('library_not_found', array(), array('context' => 'ting_infomedia.error'));
t('borrowercheck_not_allowed', array(), array('context' => 'ting_infomedia.error'));
t('borrower_not_found', array(), array('context' => 'ting_infomedia.error'));
t('error_in_request', array(), array('context' => 'ting_infomedia.error'));
