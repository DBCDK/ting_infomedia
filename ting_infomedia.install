<?php

/**
 * @file
 * Install, update and uninstall functions for the ting ting_infomedia module.
 */

/**
 * Implements hook_ding_entity_fields().
 */
/*
// Old Ding2 entity: do we need it?
function ting_infomedia_ding_entity_fields() {
  return array(
    'ting_infomedia' => array(
      'field' => array(
        'locked' => TRUE,
        'storage' => array(
          'type' => 'virtual_field',
        ),
      ),
      'instance' => array(
        'label' => t('Link to infomedia articles'),
      ),
    ),
  );
}
*/


function ting_infomedia_ding_entity_fields() {
  $display_full = array(
    'default' => array(
      'label' => 'hidden',
      'type' => 'hidden',
    ),
    'reservation' => array(
      'type' => 'hidden',
    ),
    'full' => array(
      'label' => 'hidden',
      'type' => 'hidden',
    ),
  );
  return array(
    'ting_infomedia_link' => array(
      'field' => array(
        'locked' => FALSE,
        'storage' => array(
          'type' => 'virtual_field',
        ),
      ),
      'instance' => array(
        'ding_entity_type' => 'bibdkManifestation',
        'label' => t('Read infomedia article'),
        'bundle' => 'bibdkManifestation',
        'entity_type' => 'bibdkManifestation',
        'display' => $display_full,
      ),
    ),
  );
}


/**
 * Implements hook_disable.
 */
function ting_infomedia_disable() {
  $fields = ting_infomedia_ding_entity_fields();
  foreach ($fields as $field_name => $field) {
    field_delete_instance($field_name);
    field_delete_field($field_name);
  }
}


/**
 * Implementing hook_requirements()
 */
function ting_infomedia_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    $url = variable_get('TingClientInfomediaArticleRequest_url');
    if ( !isset($url) ) {
      $requirements['TingClientInfomediaArticleRequest_url'] = array(
        'title' => t('Infomedia settings'),
        'value' =>  l(t('Url to infomedia webservice must be set in admin'), 'admin/config/serviceclient/settings'),
        'severity' => REQUIREMENT_ERROR
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function ting_infomedia_schema() {
  $schema['bibdk_cache_infomedia_webservice'] = drupal_get_schema_unprocessed('system', 'cache');
  return $schema;
}


/**
 * Convert blackhole field storage to virtual field.
 */
function ting_infomedia_update_7000() {
  return db_update('field_config')
    ->fields(array(
      'storage_type' => 'virtual_field',
      'storage_module' => 'virtual_field',
    ))
    ->condition('module', 'ting_infomedia')
    ->execute();
}

/**
 * Implements hook_update_N
 * make a cache table
 */
function ting_infomedia_update_7001() {
  $name = 'bibdk_cache_infomedia_webservice';
  $schema = drupal_get_schema_unprocessed('system', 'cache');
  try {
    db_create_table($name, $schema);
  } catch (Exception $e) {
    // do nothing table probably already exists
  }
}

/**
 * Remove field ting_infomedia_link. the link is implemented with a hook instead
 */
function ting_infomedia_update_7002() {
  field_delete_field('ting_infomedia_link');
}
